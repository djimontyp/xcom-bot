import random

import discord
from discord import Cog, ApplicationContext, SlashCommandGroup
from discord.ext import commands
from discord.ext.commands import Bot, cooldown
from discord.utils import get
from sqlalchemy import select, func

from src.components.views.confirm import Confirm
from src.components.views.game_result import ResultsButtons
from src.core.checks import is_user_in_db
from src.core.config import settings
from src.core.database import async_session_maker
from src.core.enum import Rank, Map
from src.core.models import Player
from src.core.utils import roles_ids
from src.errors.player import (
    NotSetRolesError,
    PlayerNotCreatedError,
    PlayerNotInSearchError,
    PlayerSelfInviteError,
    PlayerAlreadyCreatedError,
)
from src.services.player import PlayerService


class PlayerCog(Cog, guild_ids=[settings.GUILD_ID]):
    def __init__(self, bot: Bot):
        self.bot = bot

    player = SlashCommandGroup("player", "–ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤.")

    @player.command(description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ.")
    async def start(self, ctx: ApplicationContext):
        await ctx.defer(ephemeral=True)

        async with PlayerService(ctx.user.id, ctx=ctx) as service:
            if player := await service.get_instance():
                raise PlayerAlreadyCreatedError(player)

            await service.add(Player(id=ctx.user.id))
            await service.session.commit()

        embed = await service.get_player_embed()
        role = ctx.guild.get_role(roles_ids[Rank.neofit])
        await ctx.user.add_roles(role)
        await ctx.respond("–ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω.", embed=embed, delete_after=settings.DELETE_AFTER, ephemeral=True)

    @player.command(description="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∏–≥—Ä—ã.")
    @is_user_in_db()
    async def go(self, ctx: ApplicationContext):
        await ctx.defer(ephemeral=True)

        async with PlayerService(ctx.user.id, ctx=ctx) as service:
            async with service.session.begin():
                player = await service.get_instance()
                player.in_search = True
            embed = await service.get_player_embed()

        await ctx.respond("–ü–æ–∏—Å–∫ –Ω–∞—á–∞—Ç.", embed=embed, delete_after=settings.DELETE_AFTER, ephemeral=True)

    @player.command(description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –∏–≥—Ä—ã.")
    @is_user_in_db()
    async def leave(self, ctx: ApplicationContext):
        await ctx.defer(ephemeral=True)

        async with PlayerService(ctx.user.id, ctx=ctx) as service:
            async with service.session.begin():
                player = await service.get_instance()
                player.in_search = False
            embed = await service.get_player_embed()

        await ctx.respond("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", embed=embed, delete_after=settings.DELETE_AFTER, ephemeral=True)

    @player.command(description="–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä")
    @is_user_in_db()
    async def history(self, ctx: ApplicationContext):
        await ctx.defer(ephemeral=True)
        async with PlayerService(ctx.user.id, ctx=ctx) as service:
            games = await service.get_my_last_10_games()

        embed = discord.Embed(title=f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–≥—Ä", color=discord.Color.red())
        description = ""
        for game in games:
            winner = get(self.bot.get_all_members(), id=game.winner_id)
            loser = get(self.bot.get_all_members(), id=game.loser_id)
            if not loser or not winner:
                continue

            description += f"`‚Ññ{str(game.id).rjust(4, ' ')}.`"
            description += f" üèÜ{winner.mention}"
            description += f" `{game.winner_rating_before}`‚Æï`{game.winner_rating_after}[{game.winner_income}]`"
            description += f" "
            description += f"üòÆ‚Äçüí®{loser.mention}"
            description += f" `{game.loser_rating_before}`‚Æï`{game.loser_rating_after}[{game.loser_income}]`\n"

        players_text = f"{description if description else '–ü—É—Å—Ç–æ.'}"
        embed.description = f"{players_text}"
        await ctx.respond(embed=embed, ephemeral=True)

    @player.command(description="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ —Å–µ—Å—Å–∏—é.")
    @is_user_in_db()
    async def rank(self, ctx: ApplicationContext):
        async with PlayerService(ctx.user.id, ctx=ctx) as service:
            players, start_rank = await service.get_my_position()
            enumerated_players = enumerate(players, start=start_rank)
            embed = discord.Embed(title=f"–ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ", color=discord.Color.dark_grey())
            players_text = "\n".join(
                f"`{str(index).rjust(2, ' ')}. {str(player.rating).rjust(4, ' ')}` <@{player.id}>"
                for index, player in enumerated_players
            )
            players_text = f"\n{players_text if players_text else '–ü—É—Å—Ç–æ.'}"
            embed.description = f"{players_text}"
            await ctx.respond(embed=embed, ephemeral=True)

    @player.command(description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ.")
    @cooldown(1, settings.INVITE_COOLDOWN, commands.BucketType.user)
    @is_user_in_db()
    async def invite(self, ctx: ApplicationContext, player: discord.Member):
        await ctx.defer(ephemeral=True)

        async with PlayerService(player.id, ctx=ctx) as service:
            player_ = await service.get_instance()
            if not player_:
                raise PlayerNotCreatedError()
            elif not player_.in_search:
                raise PlayerNotInSearchError()
            elif player.id == ctx.user.id:
                raise PlayerSelfInviteError()

        await ctx.respond(f"–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç {player.mention}.", ephemeral=True)
        confirm_view = Confirm(initiator=ctx.user.id, invited=player.id)

        if player.can_send():
            private = await player.send(f"{ctx.user.mention} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç {player.mention} –≤ —Å–µ—Å—Å–∏—é.", view=confirm_view)
            await confirm_view.wait()
            await private.edit(view=confirm_view)

            if confirm_view.value:
                msg = f"{player.mention} –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ."
                category = discord.utils.get(ctx.guild.categories, id=settings.CATEGORY_FOR_VOICES_ID)

                if not category:
                    msg = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                    await ctx.respond(msg, delete_after=settings.DELETE_AFTER, ephemeral=True)
                else:
                    overwrites = {
                        ctx.guild.default_role: discord.PermissionOverwrite(connect=False),
                        ctx.user: discord.PermissionOverwrite(connect=True),
                        player: discord.PermissionOverwrite(connect=True),
                    }
                    voice_title = "{} vs {}".format(ctx.user.display_name, player.display_name)
                    voice = await category.create_voice_channel(name=voice_title, overwrites=overwrites)
                    buttons = ResultsButtons(initiator_id=ctx.user.id, invited_id=player.id)

                    await voice.send(view=buttons)

                    map_ = random.choice(list(Map))
                    await player.send(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é –æ—Ç {ctx.user.mention}. –ö–∞—Ä—Ç–∞: {map_}.\n{voice.jump_url}")
                    await ctx.user.send(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é. –ö–∞—Ä—Ç–∞: {map_}.\n{voice.jump_url}")

            elif confirm_view.value is None:
                msg = f"{player.mention} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ."
            else:
                msg = f"{player.mention} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ."

            async with PlayerService(ctx.user.id, ctx=ctx) as service:
                async with service.session.begin():
                    await service.update(in_search=False)

            async with PlayerService(player.id, ctx=ctx) as service:
                async with service.session.begin():
                    await service.update(in_search=False)

            await ctx.respond(msg, delete_after=settings.DELETE_AFTER, ephemeral=True)
            await ctx.delete()
        else:
            await ctx.respond(f"{player.mention} –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", ephemeral=True)

    async def cog_check(self, ctx: ApplicationContext):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –≤—Å–µ–≥–æ –º–æ–¥—É–ª—è –∏–≥—Ä–æ–∫–æ–≤."""

        if not all(roles_ids.values()):
            raise NotSetRolesError()

        return True

    async def cog_command_error(self, ctx: ApplicationContext, error: Exception) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –º–æ–¥—É–ª—è –∏–≥—Ä–æ–∫–æ–≤."""
        if isinstance(error, NotSetRolesError):
            admin_cog = self.bot.get_cog("AdminCog")
            admin_commands = discord.utils.get(admin_cog.get_commands(), name="admin")
            set_roles = discord.utils.get(admin_commands.walk_commands(), name="set_roles")  # noqa
            await ctx.respond(
                f"{str(error)}\n{set_roles.mention}.",
                ephemeral=True,
                delete_after=settings.DELETE_AFTER,
            )
        elif isinstance(error, (PlayerNotInSearchError, PlayerSelfInviteError, PlayerAlreadyCreatedError)):
            await ctx.respond(
                str(error),
                ephemeral=True,
                delete_after=settings.DELETE_AFTER,
            )
        elif isinstance(error, PlayerNotCreatedError):
            player_commands = discord.utils.get(self.get_commands(), name="player")
            start = discord.utils.get(player_commands.walk_commands(), name="start")  # noqa
            await ctx.respond(
                f"{str(error)} –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ: {start.mention}.",
                ephemeral=True,
                delete_after=settings.DELETE_AFTER,
            )
        elif isinstance(error, commands.CommandOnCooldown):
            await ctx.respond(
                f"–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ {error.retry_after:.2f} —Å–µ–∫—É–Ω–¥.",
                ephemeral=True,
                delete_after=settings.DELETE_AFTER,
            )
        else:
            print(error)
            await ctx.respond(
                f"–ú–æ–¥—É–ª—å –∏–≥—Ä–æ–∫–æ–≤: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.",
                ephemeral=True,
                delete_after=settings.DELETE_AFTER,
            )
            raise error
